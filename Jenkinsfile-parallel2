def label_scm = "mypod-${UUID.randomUUID().toString()}"


parameters {
	string(name: 'buid_id', defaultValue: "${env.BUILD_NUMBER}", description: 'What should I say?')
  }


podTemplate(label: label_scm,
		cloud: "kubernetes",
		containers: [containerTemplate(name: 'maven', image: 'maven:3.8.4-jdk-8',command: 'sleep', args: '99d'),
				containerTemplate(name: 'docker', image: 'docker', command: 'sleep', args: '99d'),
    				containerTemplate(name: 'kubectl', image: 'bitnami/kubectl:1.20.15', command: 'sleep', args: '99d'),
		volumes: [configMapVolume(configMapName: 'settings.xml', mountPath: '/config')]
    ){
    
    stage('SCM') {
			
		git credentialsId: 'github', url: 'git@github.com:jackbauer123/mytest.git'
		script {
		    build_tag = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
		    if (env.BRANCH_NAME != 'master') {
			build_tag = "${build_tag}-${env.BUILD_NUMBER}"
		    }
		}
			
	}
    
   parallel ( 
        
        "storage":  { 
            	node(label_scm) {
                    	stage('build storage jar'){
                      		git credentialsId: 'github', url: 'git@github.com:jackbauer123/mytest.git'	
			      	container('maven') {

					sh 'mvn -B -ntp clean package -DskipTests -f samples-common/pom.xml -s  /config/settings.xml'
					sh 'mvn install -pl samples-common  -s /config/settings.xml'
					sh 'mvn -B -ntp clean package -DskipTests -f storage/pom.xml  -s /config/settings.xml'
				}
                 	}
			stage('build storage image') {
			  
				  container('docker'){
					  account = docker.build("jackbauer123/storage:${build_tag}","storage")

				  }
			 
			}


		}

        },
         "account": {
              node(label_scm) {
                    	stage('build account jar'){
				git credentialsId: 'github', url: 'git@github.com:jackbauer123/mytest.git'	
				container('maven') {
					sh 'mvn -B -ntp clean package -DskipTests -f samples-common/pom.xml  -s /config/settings.xml'
					sh 'mvn install -pl samples-common  -s /config/settings.xml'
					sh 'mvn -B -ntp clean package -DskipTests -f account/pom.xml -s /config/settings.xml'
				}
                     	}
		     	stage('build account image') {
			  
				  container('docker'){
					  account = docker.build("jackbauer123/account:${build_tag}","account")

				  }
			 
			}


              }
	},
         "order": {
              node(label_scm) {
                    	stage('build order jar'){
                        	git credentialsId: 'github', url: 'git@github.com:jackbauer123/mytest.git'	
				container('maven') {
					sh 'mvn -B -ntp clean package -DskipTests  -f samples-common/pom.xml -s /config/settings.xml'
					sh 'mvn install -pl samples-common -s /config/settings.xml'
					sh 'mvn -B -ntp clean package -DskipTests -f order/pom.xml -s /config/settings.xml'
				}
                     	}
		     	stage('build order image') {
			  
				  container('docker'){
					  account = docker.build("jackbauer123/order:${build_tag}","order")

				  }
			 
			}


              }
	},
         "logic": {
              node(label_scm) {
                    	stage('build logic jar'){
				git credentialsId: 'github', url: 'git@github.com:jackbauer123/mytest.git'	
				container('maven') {
					sh 'mvn -B -ntp clean package -DskipTests  -f samples-common/pom.xml -s /config/settings.xml'
					sh 'mvn install -pl samples-common -s /config/settings.xml'
					sh 'mvn -B -ntp clean package -DskipTests -f logic/pom.xml -s /config/settings.xml'
				}
                     	}
		     
		     	stage('build logic image') {
			  
				  container('docker'){
					  account = docker.build("jackbauer123/logic:${build_tag}","logic")

				  }
			 
			}


              }
	}	
	)	
	
	


}


